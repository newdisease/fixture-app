generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// · · · · · · · · · · · · · · · · · · · · 
// User Models
// · · · · · · · · · · · · · · · · · · · · 

model User {
  id       String     @id @default(cuid())
  email    String     @unique
  fullName String?
  username String?    @unique
  image    UserImage?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks         Task[]
  subscriptions Subscription[]
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// · · · · · · · · · · · · · · · · · · · · 
// Task Models
// · · · · · · · · · · · · · · · · · · · · 

model Task {
  id          String   @id @default(cuid())
  title       String
  description String
  deadline    DateTime
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User   @relation(fields: [creatorId], references: [id])
  creatorId String

  subscriptions Subscription[]
}

// · · · · · · · · · · · · · · · · · · · · 
// Subscription Models
// · · · · · · · · · · · · · · · · · · · · 

model Subscription {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  task   Task   @relation(fields: [taskId], references: [id])
  taskId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
